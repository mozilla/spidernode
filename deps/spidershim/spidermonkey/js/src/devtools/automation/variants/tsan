{
    "configure-args": "--enable-debug-symbols='-gline-tables-only' --disable-jemalloc --enable-thread-sanitizer",
    "optimize": true,
    "debug": false,
    "compiler": "clang",
    "env": {
        "LLVM_SYMBOLIZER": "{TOOLTOOL_CHECKOUT}/clang/bin/llvm-symbolizer",
        "JITTEST_EXTRA_ARGS": "--jitflags=tsan --ignore-timeouts={DIR}/cgc-jittest-timeouts.txt --unusable-error-status --exclude-from={DIR}/tsan-sighandlers.txt",
        "JSTESTS_EXTRA_ARGS": "--exclude-file={DIR}/cgc-jstests-slow.txt",
        "TSAN_OPTIONS": "exitcode=0 log_path={OUTDIR}/sanitize_log"
    },
    "[comment on expect-errors]": "Note that expect-errors may contain duplicates. These indicate that tsan reports errors as two distinct line numbers. We cannot just insert line numbers, because they will shift around between versions.",
    "expect-errors": [
        [ "Shape.h", "inDictionary" ],
        [ "jsfriendapi.h", "GetObjectClass" ],
        [ "Shape.h", "maybeSlot" ],
        [ "Barrier.h", "set" ],
        [ "jitprofiling.c", "iJIT_GetNewMethodID" ],
        [ "Statistics.h", "count" ],
        [ "Shape.h", "setOverwritten" ],
        [ "TestingFunctions.cpp", "js::DefineTestingFunctions(JSContext*, JS::Handle<JSObject*>, bool, bool)" ],
        [ "TestingFunctions.cpp", "js::DefineTestingFunctions(JSContext*, JS::Handle<JSObject*>, bool, bool)" ],
        [ "OSObject.cpp", "js::shell::DefineOS(JSContext*, JS::Handle<JSObject*>, bool, js::shell::RCFile**, js::shell::RCFile**)" ],
        [ "OSObject.cpp", "js::shell::DefineOS(JSContext*, JS::Handle<JSObject*>, bool, js::shell::RCFile**, js::shell::RCFile**)" ],
        [ "ObjectGroup.h", "addendumKind" ],
        [ "jsfriendapi.h", "numFixedSlots" ],
        [ "Marking.cpp", "js::GCMarker::reset()" ],
        [ "jsfun.h", "setResolvedLength" ],
        [ "Shape.h", "incrementNumLinearSearches" ],
        [ "Statistics.h", "js::gc::GCRuntime::pickChunk(js::AutoLockGC const&, js::gc::AutoMaybeStartBackgroundAllocation&)" ],
        [ "jsfun.h", "needsSomeEnvironmentObject" ],
        [ "TypeInference-inl.h", "setBasePropertyCount" ],
        [ "Statistics.h", "js::gc::GCRuntime::getOrAllocChunk(js::AutoLockGC const&, js::gc::AutoMaybeStartBackgroundAllocation&)" ]
    ]
}
