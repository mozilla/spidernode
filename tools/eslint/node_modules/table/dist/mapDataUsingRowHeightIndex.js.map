{"version":3,"sources":["mapDataUsingRowHeightIndex.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;;;;;;;;;;kBAQe,UAAC,YAAD,EAAe,cAAf,EAA+B,MAA/B,EAA0C;AACrD,QAAI,mBAAJ;QACI,mBADJ;;AAGA,iBAAa,aAAa,CAAb,EAAgB,MAA7B;;;;AAIA,iBAAa,mBAAM,YAAN,EAAoB,UAAC,KAAD,EAAQ,MAAR,EAAmB;AAChD,YAAI,kBAAJ;;AAEA,oBAAY,mBAAM,MAAM,eAAe,MAAf,CAAN,CAAN,EAAqC,YAAM;AACnD,mBAAO,oBAAO,MAAM,UAAN,CAAP,EAA0B,EAA1B,CAAP;AACH,SAFW,CAAZ;;;;;;;;AAUA,+BAAU,KAAV,EAAiB,UAAC,KAAD,EAAQ,MAAR,EAAmB;AAChC,gBAAI,qBAAJ;;AAEA,gBAAI,OAAO,OAAP,CAAe,MAAf,EAAuB,QAA3B,EAAqC;AACjC,+BAAe,wBAAS,KAAT,EAAgB,OAAO,OAAP,CAAe,MAAf,EAAuB,KAAvC,CAAf;AACH,aAFD,MAEO;AACH,+BAAe,0BAAW,KAAX,EAAkB,OAAO,OAAP,CAAe,MAAf,EAAuB,KAAzC,CAAf;AACH;;;;AAID,mCAAU,YAAV,EAAwB,UAAC,IAAD,EAAO,MAAP,EAAkB;;;AAGtC,0BAAU,MAAV,EAAkB,MAAlB,IAA4B,IAA5B;AACH,aAJD;AAKH,SAhBD;;AAkBA,eAAO,SAAP;AACH,KAhCY,CAAb;;AAkCA,WAAO,uBAAU,UAAV,CAAP;AACH,C","file":"mapDataUsingRowHeightIndex.js","sourcesContent":["import _ from 'lodash';\nimport wrapString from './wrapString';\nimport wrapWord from './wrapWord';\n\n/**\n * @param {Array} unmappedRows\n * @param {number[]} rowHeightIndex\n * @param {Object} config\n * @return {Array}\n */\nexport default (unmappedRows, rowHeightIndex, config) => {\n    let mappedRows,\n        tableWidth;\n\n    tableWidth = unmappedRows[0].length;\n\n    // console.log('unmappedRows', unmappedRows, 'rowHeightIndex', rowHeightIndex, 'config', config, 'tableWidth', tableWidth);\n\n    mappedRows = _.map(unmappedRows, (cells, index0) => {\n        let rowHeight;\n\n        rowHeight = _.map(Array(rowHeightIndex[index0]), () => {\n            return _.fill(Array(tableWidth), '');\n        });\n\n        // console.log('rowHeight', rowHeight);\n\n        // rowHeight\n        //     [{row index within rowSaw; index2}]\n        //     [{cell index within a virtual row; index1}]\n\n        _.forEach(cells, (value, index1) => {\n            let chunkedValue;\n\n            if (config.columns[index1].wrapWord) {\n                chunkedValue = wrapWord(value, config.columns[index1].width);\n            } else {\n                chunkedValue = wrapString(value, config.columns[index1].width);\n            }\n\n            // console.log('chunkedValue', chunkedValue.length, 'rowHeight', rowHeight.length);\n\n            _.forEach(chunkedValue, (part, index2) => {\n                // console.log(rowHeight[index2]);\n\n                rowHeight[index2][index1] = part;\n            });\n        });\n\n        return rowHeight;\n    });\n\n    return _.flatten(mappedRows);\n};\n"]}